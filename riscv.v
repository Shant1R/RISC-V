//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
`include "sp_verilog.vh" //_\SV
   // This code can be found in: https://github.com/stevehoover/RISC-V_MYTH_Workshop
   
	// Included URL: "https://raw.githubusercontent.com/BalaDhinesh/RISC-V_MYTH_Workshop/master/tlv_lib/risc-v_shell_lib.tlv"// Included URL: "https://raw.githubusercontent.com/stevehoover/warp-v_includes/2d6d36baa4d2bc62321f982f78c8fe1456641a43/risc-v_defs.tlv"
//_\SV
   module riscv(input shant_clk, input shant_reset, input [31:0] shant_idata0, shant_idata1, shant_idata2, shant_idata3, shant_idata4, shant_idata5, shant_idata6, shant_idata7, shant_idata8, shant_idata9, shant_idata10, shant_idata11, shant_idata12, shant_idata13, shant_idata14, shant_idata15, shant_idata16, shant_idata17, shant_idata18, shant_idata19, shant_idata20, shant_idata21, shant_idata22, shant_idata23, shant_idata24, shant_idata25, shant_idata26, shant_idata27, shant_idata28, shant_idata29, shant_idata30, shant_idata31, output reg [31:0] shant_reg0, shant_reg1, shant_reg2, shant_reg3, shant_reg4, shant_reg5, shant_reg6, shant_reg7, shant_reg8, shant_reg9, shant_reg10, shant_reg11, shant_reg12, shant_reg13, shant_reg14, shant_reg15, shant_reg16, shant_reg17, shant_reg18, shant_reg19, shant_reg20, shant_reg21, shant_reg22, shant_reg23, shant_reg24, shant_reg25, shant_reg26, shant_reg27, shant_reg28, shant_reg29, shant_reg30, shant_reg31); 
   
   wire cyc_cnt; 
   wire passed; 
   wire failed; 
   assign cyc_cnt = 100; // cyc_cnt, passed and failed signals are valid only when running on makerchip, not valid here!   // (Expanded in Nav-TLV pane.)
// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


`include "sandpiper_gen.vh"


genvar dmem, xreg;


//
// Signals declared top-level.
//

// For |cpu$beq.
wire CPU_beq_a3;

// For |cpu$bge.
wire CPU_bge_a3;

// For |cpu$bgeu.
wire CPU_bgeu_a3;

// For |cpu$blt.
wire CPU_blt_a3;

// For |cpu$bltu.
wire CPU_bltu_a3;

// For |cpu$bne.
wire CPU_bne_a3;

// For |cpu$br_tgt_pc.
wire [31:0] CPU_br_tgt_pc_a2;
reg  [31:0] CPU_br_tgt_pc_a3;

// For |cpu$dec_bits.
wire [10:0] CPU_dec_bits_a1;

// For |cpu$dmem_addr.
wire [3:0] CPU_dmem_addr_a4;

// For |cpu$dmem_rd_data.
wire [31:0] CPU_dmem_rd_data_a4;
reg  [31:0] CPU_dmem_rd_data_a5;

// For |cpu$dmem_rd_en.
wire CPU_dmem_rd_en_a4;

// For |cpu$dmem_rd_index.
wire [5:0] CPU_dmem_rd_index_a4;

// For |cpu$dmem_wr_data.
wire [31:0] CPU_dmem_wr_data_a4;

// For |cpu$dmem_wr_en.
wire CPU_dmem_wr_en_a4;

// For |cpu$funct3.
wire [2:0] CPU_funct3_a1;

// For |cpu$funct3_valid.
wire CPU_funct3_valid_a1;

// For |cpu$funct7.
wire [6:0] CPU_funct7_a1;

// For |cpu$funct7_valid.
wire CPU_funct7_valid_a1;

// For |cpu$imem_rd_addr.
wire [30-1:0] CPU_imem_rd_addr_a0;
reg  [30-1:0] CPU_imem_rd_addr_a1;

// For |cpu$imem_rd_data.
wire [31:0] CPU_imem_rd_data_a1;

// For |cpu$imem_rd_en.
wire CPU_imem_rd_en_a0;
reg  CPU_imem_rd_en_a1;

// For |cpu$imm.
wire [31:0] CPU_imm_a1;
reg  [31:0] CPU_imm_a2,
            CPU_imm_a3;

// For |cpu$instr.
wire [31:0] CPU_instr_a1;

// For |cpu$int_pc.
wire [31:0] CPU_int_pc_a1;
reg  [31:0] CPU_int_pc_a2,
            CPU_int_pc_a3;

// For |cpu$is_add.
wire CPU_is_add_a1;
reg  CPU_is_add_a2,
     CPU_is_add_a3; read_verilog -noattr good_mux_netlist.v

// For |cpu$is_addi.
wire CPU_is_addi_a1;
reg  CPU_is_addi_a2,
     CPU_is_addi_a3;
 read_verilog -noattr good_mux_netlist.v read_verilog -noattr good_mux_netlist.v
// For |cpu$is_and.
wire CPU_is_and_a1;
reg  CPU_is_and_a2,
     CPU_is_and_a3;

// For |cpu$is_andi.
wire CPU_is_andi_a1;
reg  CPU_is_andi_a2,
     CPU_is_andi_a3;

// For |cpu$is_auipc.
wire CPU_is_auipc_a1;
reg  CPU_is_auipc_a2,
     CPU_is_auipc_a3;

// For |cpu$is_b_instr.
wire CPU_is_b_instr_a1;

// For |cpu$is_beq.
wire CPU_is_beq_a1;
reg  CPU_is_beq_a2,
     CPU_is_beq_a3;

// For |cpu$is_bge.
wire CPU_is_bge_a1;
reg  CPU_is_bge_a2,
     CPU_is_bge_a3;

// For |cpu$is_bgeu.
wire CPU_is_bgeu_a1;
reg  CPU_is_bgeu_a2,
     CPU_is_bgeu_a3;

// For |cpu$is_blt.
wire CPU_is_blt_a1;
reg  CPU_is_blt_a2,
     CPU_is_blt_a3;

// For |cpu$is_bltu.
wire CPU_is_bltu_a1;
reg  CPU_is_bltu_a2,
     CPU_is_bltu_a3;

// For |cpu$is_bne.
wire CPU_is_bne_a1;
reg  CPU_is_bne_a2,
     CPU_is_bne_a3;

// For |cpu$is_i_instr.
wire CPU_is_i_instr_a1;

// For |cpu$is_j_instr.
wire CPU_is_j_instr_a1;

// For |cpu$is_jal.
wire CPU_is_jal_a1;
reg  CPU_is_jal_a2,
     CPU_is_jal_a3;

// For |cpu$is_jalr.
wire CPU_is_jalr_a1;
reg  CPU_is_jalr_a2,
     CPU_is_jalr_a3;

// For |cpu$is_load.
wire CPU_is_load_a1;
reg  CPU_is_load_a2,
     CPU_is_load_a3;

// For |cpu$is_lui.
wire CPU_is_lui_a1;
reg  CPU_is_lui_a2,
     CPU_is_lui_a3;

// For |cpu$is_or.
wire CPU_is_or_a1;
reg  CPU_is_or_a2,
     CPU_is_or_a3;

// For |cpu$is_ori.
wire CPU_is_ori_a1;
reg  CPU_is_ori_a2,
     CPU_is_ori_a3;

// For |cpu$is_r_instr.
wire CPU_is_r_instr_a1;

// For |cpu$is_s_instr.
wire CPU_is_s_instr_a1;

// For |cpu$is_sll.
wire CPU_is_sll_a1;
reg  CPU_is_sll_a2,
     CPU_is_sll_a3;

// For |cpu$is_slli.
wire CPU_is_slli_a1;
reg  CPU_is_slli_a2,
     CPU_is_slli_a3;

// For |cpu$is_slt.
wire CPU_is_slt_a1;
reg  CPU_is_slt_a2,
     CPU_is_slt_a3;

// For |cpu$is_slti.
wire CPU_is_slti_a1;
reg  CPU_is_slti_a2,
     CPU_is_slti_a3;

// For |cpu$is_sltiu.
wire CPU_is_sltiu_a1;
reg  CPU_is_sltiu_a2,
     CPU_is_sltiu_a3;

// For |cpu$is_sltu.
wire CPU_is_sltu_a1;
reg  CPU_is_sltu_a2,
     CPU_is_sltu_a3;

// For |cpu$is_sra.
wire CPU_is_sra_a1;
reg  CPU_is_sra_a2,
     CPU_is_sra_a3;

// For |cpu$is_srai.
wire CPU_is_srai_a1;
reg  CPU_is_srai_a2,
     CPU_is_srai_a3;

// For |cpu$is_srl.
wire CPU_is_srl_a1;
reg  CPU_is_srl_a2,
     CPU_is_srl_a3;

// For |cpu$is_srli.
wire CPU_is_srli_a1;
reg  CPU_is_srli_a2,
     CPU_is_srli_a3;

// For |cpu$is_store.
wire CPU_is_store_a1;
reg  CPU_is_store_a2,
     CPU_is_store_a3;

// For |cpu$is_sub.
wire CPU_is_sub_a1;
reg  CPU_is_sub_a2,
     CPU_is_sub_a3;

// For |cpu$is_u_instr.
wire CPU_is_u_instr_a1;

// For |cpu$is_xor.
wire CPU_is_xor_a1;
reg  CPU_is_xor_a2,
     CPU_is_xor_a3;

// For |cpu$is_xori.
wire CPU_is_xori_a1;
reg  CPU_is_xori_a2,
     CPU_is_xori_a3;

// For |cpu$jalr_tgt_pc.
wire [31:0] CPU_jalr_tgt_pc_a2;
reg  [31:0] CPU_jalr_tgt_pc_a3;

// For |cpu$opcode.
wire [6:0] CPU_opcode_a1;

// For |cpu$opcode_valid.
wire CPU_opcode_valid_a1;

// For |cpu$pc.
wire [31:0] CPU_pc_a0;
reg  [31:0] CPU_pc_a1,
            CPU_pc_a2,
            CPU_pc_a3;

// For |cpu$rd.
wire [4:0] CPU_rd_a1;
reg  [4:0] CPU_rd_a2,
           CPU_rd_a3;

// For |cpu$rd_valid.
wire CPU_rd_valid_a1;
reg  CPU_rd_valid_a2,
     CPU_rd_valid_a3;

// For |cpu$reset.
wire CPU_reset_a0;
reg  CPU_reset_a1,
     CPU_reset_a2,
     CPU_reset_a3,
     CPU_reset_a4;

// For |cpu$result.
wire [31:0] CPU_result_a3;
reg  [5:2] CPU_result_a4;

// For |cpu$rf_rd_data1.
wire [31:0] CPU_rf_rd_data1_a2;

// For |cpu$rf_rd_data2.
wire [31:0] CPU_rf_rd_data2_a2;

// For |cpu$rf_rd_en1.
wire CPU_rf_rd_en1_a2;

// For |cpu$rf_rd_en2.
wire CPU_rf_rd_en2_a2;

// For |cpu$rf_rd_index1.
wire [4:0] CPU_rf_rd_index1_a2;

// For |cpu$rf_rd_index2.
wire [4:0] CPU_rf_rd_index2_a2;
reg  [4:0] CPU_rf_rd_index2_a3,
           CPU_rf_rd_index2_a4;

// For |cpu$rf_wr_data.
wire [31:0] CPU_rf_wr_data_a3;

// For |cpu$rf_wr_en.
wire CPU_rf_wr_en_a3;

// For |cpu$rf_wr_index.
wire [4:0] CPU_rf_wr_index_a3;

// For |cpu$rs1.
wire [4:0] CPU_rs1_a1;
reg  [4:0] CPU_rs1_a2;

// For |cpu$rs1_valid.
wire CPU_rs1_valid_a1;
reg  CPU_rs1_valid_a2;

// For |cpu$rs2.
wire [4:0] CPU_rs2_a1;
reg  [4:0] CPU_rs2_a2;

// For |cpu$rs2_valid.
wire CPU_rs2_valid_a1;
reg  CPU_rs2_valid_a2;

// For |cpu$sltiu_rslt.
wire CPU_sltiu_rslt_a3;

// For |cpu$sltu_rslt.
wire CPU_sltu_rslt_a3;

// For |cpu$src1_value.
wire [31:0] CPU_src1_value_a2;
reg  [31:0] CPU_src1_value_a3;

// For |cpu$src2_value.
wire [31:0] CPU_src2_value_a2;
reg  [31:0] CPU_src2_value_a3,
            CPU_src2_value_a4;

// For |cpu$start.
wire CPU_start_a0;

// For |cpu$start_int.
wire CPU_start_int_a0;
reg  CPU_start_int_a1;

// For |cpu$taken_br.
wire CPU_taken_br_a3;
reg  CPU_taken_br_a4,
     CPU_taken_br_a5;

// For |cpu$valid.
wire CPU_valid_a3;
reg  CPU_valid_a4;

// For |cpu/dmem$value.
wire [31:0] CPU_Dmem_value_a4 [15:0];
reg  [31:0] CPU_Dmem_value_a5 [15:0];

// For |cpu/xreg$value.
wire [31:0] CPU_Xreg_value_a3 [31:0];
reg  [31:0] CPU_Xreg_value_a4 [31:0],
            CPU_Xreg_value_a5 [31:0],
            CPU_Xreg_value_a6 [31:0],
            CPU_Xreg_value_a7 [31:0],
            CPU_Xreg_value_a8 [31:0],
            CPU_Xreg_value_a9 [31:0];




   //
   // Scope: |cpu
   //

      // Staging of $br_tgt_pc.
      always @(posedge shant_clk) CPU_br_tgt_pc_a3[31:0] <= CPU_br_tgt_pc_a2[31:0];

      // Staging of $dmem_rd_data.
      always @(posedge shant_clk) CPU_dmem_rd_data_a5[31:0] <= CPU_dmem_rd_data_a4[31:0];

      // Staging of $imem_rd_addr.
      always @(posedge shant_clk) CPU_imem_rd_addr_a1[30-1:0] <= CPU_imem_rd_addr_a0[30-1:0];

      // Staging of $imem_rd_en.
      always @(posedge shant_clk) CPU_imem_rd_en_a1 <= CPU_imem_rd_en_a0;

      // Staging of $imm.
      always @(posedge shant_clk) CPU_imm_a2[31:0] <= CPU_imm_a1[31:0];
      always @(posedge shant_clk) CPU_imm_a3[31:0] <= CPU_imm_a2[31:0];

      // Staging of $int_pc.
      always @(posedge shant_clk) CPU_int_pc_a2[31:0] <= CPU_int_pc_a1[31:0];
      always @(posedge shant_clk) CPU_int_pc_a3[31:0] <= CPU_int_pc_a2[31:0];

      // Staging of $is_add.
      always @(posedge shant_clk) CPU_is_add_a2 <= CPU_is_add_a1;
      always @(posedge shant_clk) CPU_is_add_a3 <= CPU_is_add_a2;

      // Staging of $is_addi.
      always @(posedge shant_clk) CPU_is_addi_a2 <= CPU_is_addi_a1;
      always @(posedge shant_clk) CPU_is_addi_a3 <= CPU_is_addi_a2;

      // Staging of $is_and.
      always @(posedge shant_clk) CPU_is_and_a2 <= CPU_is_and_a1;
      always @(posedge shant_clk) CPU_is_and_a3 <= CPU_is_and_a2;

      // Staging of $is_andi.
      always @(posedge shant_clk) CPU_is_andi_a2 <= CPU_is_andi_a1;
      always @(posedge shant_clk) CPU_is_andi_a3 <= CPU_is_andi_a2;

      // Staging of $is_auipc.
      always @(posedge shant_clk) CPU_is_auipc_a2 <= CPU_is_auipc_a1;
      always @(posedge shant_clk) CPU_is_auipc_a3 <= CPU_is_auipc_a2;

      // Staging of $is_beq.
      always @(posedge shant_clk) CPU_is_beq_a2 <= CPU_is_beq_a1;
      always @(posedge shant_clk) CPU_is_beq_a3 <= CPU_is_beq_a2;

      // Staging of $is_bge.
      always @(posedge shant_clk) CPU_is_bge_a2 <= CPU_is_bge_a1;
      always @(posedge shant_clk) CPU_is_bge_a3 <= CPU_is_bge_a2;

      // Staging of $is_bgeu.
      always @(posedge shant_clk) CPU_is_bgeu_a2 <= CPU_is_bgeu_a1;
      always @(posedge shant_clk) CPU_is_bgeu_a3 <= CPU_is_bgeu_a2;

      // Staging of $is_blt.
      always @(posedge shant_clk) CPU_is_blt_a2 <= CPU_is_blt_a1;
      always @(posedge shant_clk) CPU_is_blt_a3 <= CPU_is_blt_a2;

      // Staging of $is_bltu.
      always @(posedge shant_clk) CPU_is_bltu_a2 <= CPU_is_bltu_a1;
      always @(posedge shant_clk) CPU_is_bltu_a3 <= CPU_is_bltu_a2;

      // Staging of $is_bne.
      always @(posedge shant_clk) CPU_is_bne_a2 <= CPU_is_bne_a1;
      always @(posedge shant_clk) CPU_is_bne_a3 <= CPU_is_bne_a2;

      // Staging of $is_jal.
      always @(posedge shant_clk) CPU_is_jal_a2 <= CPU_is_jal_a1;
      always @(posedge shant_clk) CPU_is_jal_a3 <= CPU_is_jal_a2;

      // Staging of $is_jalr.
      always @(posedge shant_clk) CPU_is_jalr_a2 <= CPU_is_jalr_a1;
      always @(posedge shant_clk) CPU_is_jalr_a3 <= CPU_is_jalr_a2;

      // Staging of $is_load.
      always @(posedge shant_clk) CPU_is_load_a2 <= CPU_is_load_a1;
      always @(posedge shant_clk) CPU_is_load_a3 <= CPU_is_load_a2;

      // Staging of $is_lui.
      always @(posedge shant_clk) CPU_is_lui_a2 <= CPU_is_lui_a1;
      always @(posedge shant_clk) CPU_is_lui_a3 <= CPU_is_lui_a2;

      // Staging of $is_or.
      always @(posedge shant_clk) CPU_is_or_a2 <= CPU_is_or_a1;
      always @(posedge shant_clk) CPU_is_or_a3 <= CPU_is_or_a2;

      // Staging of $is_ori.
      always @(posedge shant_clk) CPU_is_ori_a2 <= CPU_is_ori_a1;
      always @(posedge shant_clk) CPU_is_ori_a3 <= CPU_is_ori_a2;

      // Staging of $is_sll.
      always @(posedge shant_clk) CPU_is_sll_a2 <= CPU_is_sll_a1;
      always @(posedge shant_clk) CPU_is_sll_a3 <= CPU_is_sll_a2;

      // Staging of $is_slli.
      always @(posedge shant_clk) CPU_is_slli_a2 <= CPU_is_slli_a1;
      always @(posedge shant_clk) CPU_is_slli_a3 <= CPU_is_slli_a2;

      // Staging of $is_slt.
      always @(posedge shant_clk) CPU_is_slt_a2 <= CPU_is_slt_a1;
      always @(posedge shant_clk) CPU_is_slt_a3 <= CPU_is_slt_a2;

      // Staging of $is_slti.
      always @(posedge shant_clk) CPU_is_slti_a2 <= CPU_is_slti_a1;
      always @(posedge shant_clk) CPU_is_slti_a3 <= CPU_is_slti_a2;

      // Staging of $is_sltiu.
      always @(posedge shant_clk) CPU_is_sltiu_a2 <= CPU_is_sltiu_a1;
      always @(posedge shant_clk) CPU_is_sltiu_a3 <= CPU_is_sltiu_a2;

      // Staging of $is_sltu.
      always @(posedge shant_clk) CPU_is_sltu_a2 <= CPU_is_sltu_a1;
      always @(posedge shant_clk) CPU_is_sltu_a3 <= CPU_is_sltu_a2;

      // Staging of $is_sra.
      always @(posedge shant_clk) CPU_is_sra_a2 <= CPU_is_sra_a1;
      always @(posedge shant_clk) CPU_is_sra_a3 <= CPU_is_sra_a2;

      // Staging of $is_srai.
      always @(posedge shant_clk) CPU_is_srai_a2 <= CPU_is_srai_a1;
      always @(posedge shant_clk) CPU_is_srai_a3 <= CPU_is_srai_a2;

      // Staging of $is_srl.
      always @(posedge shant_clk) CPU_is_srl_a2 <= CPU_is_srl_a1;
      always @(posedge shant_clk) CPU_is_srl_a3 <= CPU_is_srl_a2;

      // Staging of $is_srli.
      always @(posedge shant_clk) CPU_is_srli_a2 <= CPU_is_srli_a1;
      always @(posedge shant_clk) CPU_is_srli_a3 <= CPU_is_srli_a2;

      // Staging of $is_store.
      always @(posedge shant_clk) CPU_is_store_a2 <= CPU_is_store_a1;
      always @(posedge shant_clk) CPU_is_store_a3 <= CPU_is_store_a2;

      // Staging of $is_sub.
      always @(posedge shant_clk) CPU_is_sub_a2 <= CPU_is_sub_a1;
      always @(posedge shant_clk) CPU_is_sub_a3 <= CPU_is_sub_a2;

      // Staging of $is_xor.
      always @(posedge shant_clk) CPU_is_xor_a2 <= CPU_is_xor_a1;
      always @(posedge shant_clk) CPU_is_xor_a3 <= CPU_is_xor_a2;

      // Staging of $is_xori.
      always @(posedge shant_clk) CPU_is_xori_a2 <= CPU_is_xori_a1;
      always @(posedge shant_clk) CPU_is_xori_a3 <= CPU_is_xori_a2;

      // Staging of $jalr_tgt_pc.
      always @(posedge shant_clk) CPU_jalr_tgt_pc_a3[31:0] <= CPU_jalr_tgt_pc_a2[31:0];

      // Staging of $pc.
      always @(posedge shant_clk) CPU_pc_a1[31:0] <= CPU_pc_a0[31:0];
      always @(posedge shant_clk) CPU_pc_a2[31:0] <= CPU_pc_a1[31:0];
      always @(posedge shant_clk) CPU_pc_a3[31:0] <= CPU_pc_a2[31:0];

      // Staging of $rd.
      always @(posedge shant_clk) CPU_rd_a2[4:0] <= CPU_rd_a1[4:0];
      always @(posedge shant_clk) CPU_rd_a3[4:0] <= CPU_rd_a2[4:0];

      // Staging of $rd_valid.
      always @(posedge shant_clk) CPU_rd_valid_a2 <= CPU_rd_valid_a1;
      always @(posedge shant_clk) CPU_rd_valid_a3 <= CPU_rd_valid_a2;

      // Staging of $reset.
      always @(posedge shant_clk) CPU_reset_a1 <= CPU_reset_a0;
      always @(posedge shant_clk) CPU_reset_a2 <= CPU_reset_a1;
      always @(posedge shant_clk) CPU_reset_a3 <= CPU_reset_a2;
      always @(posedge shant_clk) CPU_reset_a4 <= CPU_reset_a3;

      // Staging of $result.
      always @(posedge shant_clk) CPU_result_a4[5:2] <= CPU_result_a3[5:2];

      // Staging of $rf_rd_index2.
      always @(posedge shant_clk) CPU_rf_rd_index2_a3[4:0] <= CPU_rf_rd_index2_a2[4:0];
      always @(posedge shant_clk) CPU_rf_rd_index2_a4[4:0] <= CPU_rf_rd_index2_a3[4:0];

      // Staging of $rs1.
      always @(posedge shant_clk) CPU_rs1_a2[4:0] <= CPU_rs1_a1[4:0];

      // Staging of $rs1_valid.
      always @(posedge shant_clk) CPU_rs1_valid_a2 <= CPU_rs1_valid_a1;

      // Staging of $rs2.
      always @(posedge shant_clk) CPU_rs2_a2[4:0] <= CPU_rs2_a1[4:0];

      // Staging of $rs2_valid.
      always @(posedge shant_clk) CPU_rs2_valid_a2 <= CPU_rs2_valid_a1;

      // Staging of $src1_value.
      always @(posedge shant_clk) CPU_src1_value_a3[31:0] <= CPU_src1_value_a2[31:0];

      // Staging of $src2_value.
      always @(posedge shant_clk) CPU_src2_value_a3[31:0] <= CPU_src2_value_a2[31:0];
      always @(posedge shant_clk) CPU_src2_value_a4[31:0] <= CPU_src2_value_a3[31:0];

      // Staging of $start_int.
      always @(posedge shant_clk) CPU_start_int_a1 <= CPU_start_int_a0;

      // Staging of $taken_br.
      always @(posedge shant_clk) CPU_taken_br_a4 <= CPU_taken_br_a3;
      always @(posedge shant_clk) CPU_taken_br_a5 <= CPU_taken_br_a4;

      // Staging of $valid.
      always @(posedge shant_clk) CPU_valid_a4 <= CPU_valid_a3;


      //
      // Scope: /dmem[15:0]
      //
      generate for (dmem = 0; dmem <= 15; dmem=dmem+1) begin : L1gen_CPU_Dmem
         // Staging of $value.
         always @(posedge shant_clk) CPU_Dmem_value_a5[dmem][31:0] <= CPU_Dmem_value_a4[dmem][31:0];

      end endgenerate

      //
      // Scope: /xreg[31:0]
      //
      generate for (xreg = 0; xreg <= 31; xreg=xreg+1) begin : L1gen_CPU_Xreg
         // Staging of $value.
         always @(posedge shant_clk) CPU_Xreg_value_a4[xreg][31:0] <= CPU_Xreg_value_a3[xreg][31:0];
         always @(posedge shant_clk) CPU_Xreg_value_a5[xreg][31:0] <= CPU_Xreg_value_a4[xreg][31:0];
         always @(posedge shant_clk) CPU_Xreg_value_a6[xreg][31:0] <= CPU_Xreg_value_a5[xreg][31:0];
         always @(posedge shant_clk) CPU_Xreg_value_a7[xreg][31:0] <= CPU_Xreg_value_a6[xreg][31:0];
         always @(posedge shant_clk) CPU_Xreg_value_a8[xreg][31:0] <= CPU_Xreg_value_a7[xreg][31:0];
         always @(posedge shant_clk) CPU_Xreg_value_a9[xreg][31:0] <= CPU_Xreg_value_a8[xreg][31:0];

      end endgenerate


// ---------- Generated Code Ends ----------
//_\TLV

   // /====================\
   // | Sum 1 to 9 Program |
   // \====================/
   //
   // Program for MYTH Workshop to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  r10 (a0): In: 0, Out: final sum
   //  r12 (a2): 10
   //  r13 (a3): 1..10
   //  r14 (a4): Sum
   // 
   // External to function:
                // Initialize r10 (a0) to 0.
   // Function:
               // Initialize sum register a4 with 0x0
            // Store count of 10 in register a2.
               // Initialize intermediate sum register a3 with 0
   // Loop:
              // Incremental addition
               // Increment intermediate register by 1
    // If a3 is less than a2, branch to label named <loop>
               // Store final result to register a0 so that it can be read by main program
   
   
   
   // Optional:
   // m4_asm(JAL, r7, 00000000000000000000) // Done. Jump to itself (infinite loop). (Up to 20-bit signed immediate plus implicit 0 bit (unlike JALR) provides byte address; last immediate bit should also be 0)
   

   //_|cpu
      //_@0
         assign CPU_reset_a0 = shant_reset;
      // YOUR CODE HERE
      // ...   
         assign CPU_pc_a0[31:0] = (CPU_reset_a1) ? 32'b0 :
                     (CPU_is_load_a3) ? (CPU_int_pc_a3) : 
                     (CPU_is_jal_a3) ? (CPU_br_tgt_pc_a3) :
                     (CPU_is_jalr_a3) ? (CPU_jalr_tgt_pc_a3) :
                     (CPU_taken_br_a3) ? (CPU_br_tgt_pc_a3) :  (CPU_int_pc_a1)  ;
         //$pc[31:0] = (>>1$reset) ? 32'b0 : (>>3$taken_br) ? (>>3$br_tgt_pc) :  (>>1$int_pc)  ;
         //$pc[31:0] = (>>1$reset) ? 32'b0 : (>>3$valid_taken_br) ? (>>3$br_tgt_pc) :  (>>3$int_pc)  ;
         //$pc[31:0] = (>>1$reset) ? 32'b0 : (>>3$valid_taken_br) ? (>>1$br_tgt_pc) : ( (>>1$pc) + 32'd4) ;
         assign CPU_imem_rd_en_a0 = !CPU_reset_a0;
         assign CPU_imem_rd_addr_a0[30-1:0] = CPU_pc_a0[30+1:2];
      
         //$valid_int = $reset ? 1'b0 : 1'b1;
         //$valid = $reset ? 1'b0 : ($start) ? 1'b1 : (>>3$valid) ;
         //$valid = $valid_intd && !>>1$valid_intd;
         assign CPU_start_int_a0 = CPU_reset_a0 ? 1'b0 : 1'b1;
         assign CPU_start_a0 = CPU_reset_a0 ? 1'b0 : (CPU_start_int_a0 && !CPU_start_int_a1);
      // Note: Because of the magic we are using for visualisation, if visualisation is enabled below,
      //       be sure to avoid having unassigned signals (which you might be using for random inputs)
      //       other than those specifically expected in the labs. You'll get strange errors for these.   
      
      
      //_@1
         assign CPU_int_pc_a1[31:0] = CPU_pc_a1 + 32'd4;
         assign CPU_instr_a1[31:0] = CPU_imem_rd_data_a1;
         assign CPU_is_i_instr_a1 = CPU_instr_a1[6:2] == 5'b0000x || CPU_instr_a1[6:2] == 5'b001x0 || CPU_instr_a1[6:2] == 5'b11001;
         assign CPU_is_r_instr_a1 = CPU_instr_a1[6:2] == 5'b01011 || CPU_instr_a1[6:2] == 5'b10100 || CPU_instr_a1[6:2] == 5'b01110 || CPU_instr_a1[6:2] == 5'b01100 ;
         assign CPU_is_u_instr_a1 = CPU_instr_a1[6:2] == 5'b0x101;
         assign CPU_is_s_instr_a1 = CPU_instr_a1[6:2] == 5'b0100x;
         assign CPU_is_b_instr_a1 = CPU_instr_a1[6:2] == 5'b11000;
         assign CPU_is_j_instr_a1 = CPU_instr_a1[6:2] == 5'b11011;
         
         assign CPU_imm_a1[31:0] = CPU_is_i_instr_a1 ? { {21{CPU_instr_a1[31]}}, CPU_instr_a1[30:20]} :
                      CPU_is_s_instr_a1 ? { {21{CPU_instr_a1[31]}}, CPU_instr_a1[30:25], CPU_instr_a1[11:7]} :
                      CPU_is_b_instr_a1 ? { {20{CPU_instr_a1[31]}}, CPU_instr_a1[7], CPU_instr_a1[30:25] ,CPU_instr_a1[11:8], 1'b0} :
                      CPU_is_u_instr_a1 ? { CPU_instr_a1[31], CPU_instr_a1[30:20], CPU_instr_a1[19:12], {12{1'b0}} } :
                      CPU_is_j_instr_a1 ? { {11{CPU_instr_a1[31]}}, CPU_instr_a1[19:12], CPU_instr_a1[20], CPU_instr_a1[30:25], CPU_instr_a1[24:21], 1'b0} : 32'b0;
         
         assign CPU_rs2_valid_a1 = CPU_is_r_instr_a1 || CPU_is_s_instr_a1 || CPU_is_b_instr_a1 ;
         assign CPU_rs1_valid_a1 = CPU_is_r_instr_a1 || CPU_is_s_instr_a1 || CPU_is_b_instr_a1 || CPU_is_i_instr_a1 ;
         assign CPU_funct7_valid_a1 = CPU_is_r_instr_a1;
         assign CPU_funct3_valid_a1 = CPU_is_r_instr_a1 || CPU_is_s_instr_a1 || CPU_is_b_instr_a1 || CPU_is_i_instr_a1 ;
         assign CPU_opcode_valid_a1 = CPU_is_r_instr_a1 || CPU_is_s_instr_a1 || CPU_is_b_instr_a1 || CPU_is_i_instr_a1 || CPU_is_u_instr_a1 || CPU_is_j_instr_a1 ;
         assign CPU_rd_valid_a1 = CPU_is_r_instr_a1 || CPU_is_u_instr_a1 || CPU_is_j_instr_a1 || CPU_is_i_instr_a1 ;
         
         //_?$rs2_valid
            assign CPU_rs2_a1[4:0] = CPU_instr_a1[24:20];
         //_?$rs1_valid
            assign CPU_rs1_a1[4:0] = CPU_instr_a1[19:15];
         //_?$funct7_valid
            assign CPU_funct7_a1[6:0] = CPU_instr_a1[31:25];
         //_?$funct3_valid
            assign CPU_funct3_a1[2:0] = CPU_instr_a1[14:12];
         //_?$opcode_valid
            assign CPU_opcode_a1[6:0] = CPU_instr_a1[6:0];
         //_?$rd_valid
            assign CPU_rd_a1[4:0] = CPU_instr_a1[11:7];
         
         assign CPU_dec_bits_a1[10:0] = { CPU_funct7_a1[5] ,CPU_funct3_a1 ,CPU_opcode_a1};
         assign CPU_is_beq_a1 = CPU_dec_bits_a1 == 11'bx_000_1100011;
         assign CPU_is_bne_a1 = CPU_dec_bits_a1 == 11'bx_001_1100011;
         assign CPU_is_blt_a1 = CPU_dec_bits_a1 == 11'bx_100_1100011;
         assign CPU_is_bge_a1 = CPU_dec_bits_a1 == 11'bx_101_1100011;
         assign CPU_is_bltu_a1 = CPU_dec_bits_a1 == 11'bx_110_1100011;
         assign CPU_is_bgeu_a1 = CPU_dec_bits_a1 == 11'bx_111_1100011;
         assign CPU_is_addi_a1 = CPU_dec_bits_a1 == 11'bx_000_0010011;
         assign CPU_is_add_a1 = CPU_dec_bits_a1 == 11'b0_000_0110011;
         assign CPU_is_lui_a1 = CPU_dec_bits_a1 == 11'bx_xxx_0110111;
         assign CPU_is_auipc_a1 = CPU_dec_bits_a1 == 11'bx_xxx_0010111;
         assign CPU_is_jal_a1 = CPU_dec_bits_a1 == 11'bx_xxx_1101111;
         assign CPU_is_jalr_a1 = CPU_dec_bits_a1 == 11'bx_000_1100111;
         assign CPU_is_load_a1 = CPU_dec_bits_a1 == 11'bx_xxx_0000011;
         assign CPU_is_store_a1 = CPU_dec_bits_a1 == 11'bx_0xx_0100011;
         //$is_sh = $dec_bits ==? 11'bx_001_0100011;
         //$is_sw = $dec_bits ==? 11'bx_010_0100011;
         assign CPU_is_slti_a1 = CPU_dec_bits_a1 == 11'bx_010_0010011;
         assign CPU_is_sltiu_a1 = CPU_dec_bits_a1 == 11'bx_011_0010011;
         assign CPU_is_xori_a1 = CPU_dec_bits_a1 == 11'bx_100_0100011;
         assign CPU_is_ori_a1 = CPU_dec_bits_a1 == 11'bx_110_0100011;
         assign CPU_is_andi_a1 = CPU_dec_bits_a1 == 11'bx_111_0100011;
         assign CPU_is_slli_a1 = CPU_dec_bits_a1 == 11'b0_001_0100011;
         assign CPU_is_srli_a1 = CPU_dec_bits_a1 == 11'b0_101_0100011;
         assign CPU_is_srai_a1 = CPU_dec_bits_a1 == 11'b1_101_0100011;
         assign CPU_is_sub_a1 = CPU_dec_bits_a1 == 11'b1_000_0110011;
         assign CPU_is_sll_a1 = CPU_dec_bits_a1 == 11'b0_001_0110011;
         assign CPU_is_slt_a1 = CPU_dec_bits_a1 == 11'b0_010_0110011;
         assign CPU_is_sltu_a1 = CPU_dec_bits_a1 == 11'b0_011_0110011;
         assign CPU_is_xor_a1 = CPU_dec_bits_a1 == 11'b0_100_0110011;
         assign CPU_is_srl_a1 = CPU_dec_bits_a1 == 11'b0_101_0110011;
         assign CPU_is_sra_a1 = CPU_dec_bits_a1 == 11'b1_101_0110011;
         assign CPU_is_or_a1 = CPU_dec_bits_a1 == 11'b0_110_0110011;
         assign CPU_is_and_a1 = CPU_dec_bits_a1 == 11'b0_111_0110011;
      //_@2   
         assign CPU_rf_rd_en1_a2 = CPU_rs1_valid_a2;
         assign CPU_rf_rd_index1_a2[4:0] = CPU_rs1_a2;
         assign CPU_rf_rd_en2_a2 = CPU_rs2_valid_a2;
         assign CPU_rf_rd_index2_a2[4:0] = CPU_rs2_a2;
         
         assign CPU_br_tgt_pc_a2[31:0] = CPU_pc_a2 + CPU_imm_a2 ;
         assign CPU_jalr_tgt_pc_a2[31:0] = CPU_src1_value_a2 + CPU_imm_a2;
         assign CPU_src1_value_a2[31:0] = ((CPU_rf_wr_en_a3) && (CPU_rd_a3 == CPU_rs1_a2 )) ? (CPU_result_a3): CPU_rf_rd_data1_a2; 
         assign CPU_src2_value_a2[31:0] = ((CPU_rf_wr_en_a3) && (CPU_rd_a3 == CPU_rs2_a2 )) ? (CPU_result_a3) : CPU_rf_rd_data2_a2;
      //_@3
         
         assign CPU_sltu_rslt_a3 = CPU_is_sltu_a3 ? CPU_src1_value_a3 < CPU_src2_value_a3 : 32'bx ;
         assign CPU_sltiu_rslt_a3 = CPU_is_sltiu_a3 ? CPU_src1_value_a3 < CPU_imm_a3 : 32'bx ;
         
         
         assign CPU_result_a3[31:0] = CPU_is_addi_a3 ? CPU_src1_value_a3 + CPU_imm_a3 : 
                         CPU_is_add_a3  ? CPU_src1_value_a3 + CPU_src2_value_a3 :
                         CPU_is_andi_a3 ? CPU_src1_value_a3 & CPU_imm_a3 :
                         CPU_is_ori_a3 ? CPU_src1_value_a3 | CPU_imm_a3 :
                         CPU_is_xori_a3 ? CPU_src1_value_a3 ^ CPU_imm_a3 :
                         CPU_is_slli_a3 ? CPU_src1_value_a3 << CPU_imm_a3[5:0] :
                         CPU_is_srli_a3 ? CPU_src1_value_a3 >> CPU_imm_a3[5:0] :
                         CPU_is_and_a3 ? CPU_src1_value_a3 & CPU_src2_value_a3 :
                         CPU_is_or_a3 ? CPU_src1_value_a3 | CPU_src2_value_a3 :
                         CPU_is_xor_a3 ? CPU_src1_value_a3 ^ CPU_src2_value_a3 :
                         CPU_is_sub_a3  ? CPU_src1_value_a3 - CPU_src2_value_a3 :
                         CPU_is_sltu_a3 ? CPU_src1_value_a3 < CPU_src2_value_a3 :
                         CPU_is_sltiu_a3 ? CPU_src1_value_a3 < CPU_imm_a3 :
                         CPU_is_sll_a3 ? CPU_src1_value_a3 << CPU_src2_value_a3[4:0] :
                         CPU_is_srl_a3 ? CPU_src1_value_a3 >> CPU_src2_value_a3[4:0] :
                         CPU_is_lui_a3 ? {CPU_imm_a3[31:12],12'b0} :
                         CPU_is_auipc_a3 ? CPU_imm_a3 + CPU_pc_a3 :
                         CPU_is_jal_a3 ? CPU_pc_a3 + 32'd4 :
                         CPU_is_jalr_a3 ? CPU_pc_a3 + 32'd4 :
                         CPU_is_load_a3 ? CPU_src1_value_a3 + CPU_imm_a3 :
                         CPU_is_store_a3 ? CPU_src1_value_a3 + CPU_imm_a3 :
                         CPU_is_srai_a3 ? { {32{CPU_src1_value_a3[31]}}, CPU_src1_value_a3} >> CPU_imm_a3[4:0] :
                         CPU_is_sra_a3 ? { {32{CPU_src1_value_a3[31]}}, CPU_src1_value_a3} >> CPU_src2_value_a3[4:0] :
                         CPU_is_slt_a3 ? ((CPU_src1_value_a3[31] == CPU_src2_value_a3[31]) ? CPU_sltu_rslt_a3 : {31'b0,CPU_src1_value_a3[31]} ) :
                         CPU_is_slti_a3 ? ((CPU_src1_value_a3[31] == CPU_imm_a3[31]) ? CPU_sltiu_rslt_a3 : {31'b0,CPU_src1_value_a3[31]} ) : 32'bx ;
         
         assign CPU_rf_wr_en_a3 = (CPU_rd_a3 == 5'b0 ) ? 1'b0 : (CPU_valid_a3 && CPU_rd_valid_a3);
         assign CPU_rf_wr_index_a3[4:0] = CPU_rd_a3 ;
         assign CPU_rf_wr_data_a3[31:0] = (!CPU_valid_a3) ? (CPU_dmem_rd_data_a5) : CPU_result_a3;
         
         assign CPU_beq_a3 = (CPU_src1_value_a3 == CPU_src2_value_a3 ) ? 1'b1 :1'b0 ;
         assign CPU_bne_a3 = (CPU_src1_value_a3 != CPU_src2_value_a3 ) ? 1'b1 :1'b0 ;
         assign CPU_bltu_a3 = (CPU_src1_value_a3 < CPU_src2_value_a3 ) ? 1'b1 :1'b0 ;
         assign CPU_bgeu_a3 = (CPU_src1_value_a3 >= CPU_src2_value_a3 ) ? 1'b1 :1'b0 ;
         assign CPU_blt_a3 = ( (CPU_src1_value_a3 < CPU_src2_value_a3) ^ (CPU_src1_value_a3[31] != CPU_src2_value_a3[31] )) ? 1'b1 : 1'b0 ;
         assign CPU_bge_a3 = ( (CPU_src1_value_a3 >= CPU_src2_value_a3) ^ (CPU_src1_value_a3[31] != CPU_src2_value_a3[31] )) ? 1'b1 : 1'b0 ;
         
         assign CPU_taken_br_a3 = ( (CPU_is_beq_a3 && CPU_beq_a3) || (CPU_is_bne_a3 && CPU_bne_a3) || 
                       (CPU_is_blt_a3 && CPU_blt_a3) || (CPU_is_bge_a3 && CPU_bge_a3) || 
                       (CPU_is_bltu_a3 && CPU_bltu_a3) || (CPU_is_bgeu_a3 && CPU_bgeu_a3) ) ? 1'b1 :1'b0 ;
         
         assign CPU_valid_a3 = (CPU_is_load_a3) ? 1'b0 : !((CPU_taken_br_a4)|| (CPU_taken_br_a5));
         
         //$valid_taken_br = $valid && $taken_br;
      //_@4
         assign CPU_dmem_wr_en_a4 = CPU_valid_a4;
         assign CPU_dmem_addr_a4[3:0] = CPU_result_a4[5:2] ;
         assign CPU_dmem_wr_data_a4[31:0] = CPU_src2_value_a4 ;
         assign CPU_dmem_rd_en_a4 = CPU_valid_a4;
         assign CPU_dmem_rd_index_a4[5:0] = CPU_rf_rd_index2_a4 ;
         
         assign passed = CPU_Xreg_value_a9[10] == (1+2+3+4+5+6+7+8+9);
         
   // Assert these to end simulation (before Makerchip cycle limit).
   assign passed = cyc_cnt > 40;
   assign failed = 1'b0;
   
   // Macro instantiations for:
   //  o instruction memory
   //  o register file
   //  o data memory
   //  o CPU visualization
   //_|cpu
      //_\source /raw.githubusercontent.com/BalaDhinesh/RISCVMYTHWorkshop/master/tlvlib/riscvshelllib.tlv 19   // Instantiated from riscv.tlv, 216 as: m4+imem(@1)
         // Instruction Memory containing program defined by m4_asm(...) instantiations.
         //_@1
            
            
               
               
               
                  
               
            
               
            
               
            
            
            //_?$imem_rd_en
               assign CPU_imem_rd_data_a1[31:0] = (CPU_imem_rd_addr_a1 == 0) ? shant_idata0 :
                              (CPU_imem_rd_addr_a1 == 1) ? shant_idata1 :
                              (CPU_imem_rd_addr_a1 == 2) ? shant_idata2 :
                              (CPU_imem_rd_addr_a1 == 3) ? shant_idata3 :
                              (CPU_imem_rd_addr_a1 == 4) ? shant_idata4 :
                              (CPU_imem_rd_addr_a1 == 5) ? shant_idata5 :
                              (CPU_imem_rd_addr_a1 == 6) ? shant_idata6 :
                              (CPU_imem_rd_addr_a1 == 7) ? shant_idata7 :
                              (CPU_imem_rd_addr_a1 == 8) ? shant_idata8 :
                              (CPU_imem_rd_addr_a1 == 9) ? shant_idata9 :
                              (CPU_imem_rd_addr_a1 == 10) ? shant_idata10 :
                              (CPU_imem_rd_addr_a1 == 11) ? shant_idata11 :
                              (CPU_imem_rd_addr_a1 == 12) ? shant_idata12 :
                              (CPU_imem_rd_addr_a1 == 13) ? shant_idata13 :
                              (CPU_imem_rd_addr_a1 == 14) ? shant_idata14 :
                              (CPU_imem_rd_addr_a1 == 15) ? shant_idata15 :
                              (CPU_imem_rd_addr_a1 == 16) ? shant_idata16 :
                              (CPU_imem_rd_addr_a1 == 17) ? shant_idata17 :
                              (CPU_imem_rd_addr_a1 == 18) ? shant_idata18 :
                              (CPU_imem_rd_addr_a1 == 19) ? shant_idata19 :
                              (CPU_imem_rd_addr_a1 == 20) ? shant_idata20 :
                              (CPU_imem_rd_addr_a1 == 21) ? shant_idata21 :
                              (CPU_imem_rd_addr_a1 == 22) ? shant_idata22 :
                              (CPU_imem_rd_addr_a1 == 23) ? shant_idata23 :
                              (CPU_imem_rd_addr_a1 == 24) ? shant_idata24 :
                              (CPU_imem_rd_addr_a1 == 25) ? shant_idata25 :
                              (CPU_imem_rd_addr_a1 == 26) ? shant_idata26 :
                              (CPU_imem_rd_addr_a1 == 27) ? shant_idata27 :
                              (CPU_imem_rd_addr_a1 == 28) ? shant_idata28 :
                              (CPU_imem_rd_addr_a1 == 29) ? shant_idata29 :
                              (CPU_imem_rd_addr_a1 == 30) ? shant_idata30 :
                              (CPU_imem_rd_addr_a1 == 31) ? shant_idata31 :
                              31'b0 ;
              
          
      //_\end_source    // Args: (read stage)
      //_\source /raw.githubusercontent.com/BalaDhinesh/RISCVMYTHWorkshop/master/tlvlib/riscvshelllib.tlv 74   // Instantiated from riscv.tlv, 217 as: m4+rf(@2, @3)
         // Reg File
         //_@3
            generate for (xreg = 0; xreg <= 31; xreg=xreg+1) begin : L1_CPU_Xreg //_/xreg

               // For $wr.
               wire L1_wr_a3;

               assign L1_wr_a3 = CPU_rf_wr_en_a3 && (CPU_rf_wr_index_a3 != 5'b0) && (CPU_rf_wr_index_a3 == xreg);
               assign CPU_Xreg_value_a3[xreg][31:0] = CPU_reset_a3 ?   xreg           :
                              L1_wr_a3        ?   CPU_rf_wr_data_a3 :
                                             CPU_Xreg_value_a4[xreg][31:0];
            end endgenerate
         //_@2
            //_?$rf_rd_en1
               assign CPU_rf_rd_data1_a2[31:0] = CPU_Xreg_value_a4[CPU_rf_rd_index1_a2];
            //_?$rf_rd_en2
               assign CPU_rf_rd_data2_a2[31:0] = CPU_Xreg_value_a4[CPU_rf_rd_index2_a2];
            `BOGUS_USE(CPU_rf_rd_data1_a2 CPU_rf_rd_data2_a2) 
      //_\end_source  // Args: (read stage, write stage) - if equal, no register bypass is required
      //_\source /raw.githubusercontent.com/BalaDhinesh/RISCVMYTHWorkshop/master/tlvlib/riscvshelllib.tlv 91   // Instantiated from riscv.tlv, 218 as: m4+dmem(@4)
         // Data Memory
         //_@4
            generate for (dmem = 0; dmem <= 15; dmem=dmem+1) begin : L1_CPU_Dmem //_/dmem

               // For $wr.
               wire L1_wr_a4;

               assign L1_wr_a4 = CPU_dmem_wr_en_a4 && (CPU_dmem_addr_a4 == dmem);
               assign CPU_Dmem_value_a4[dmem][31:0] = CPU_reset_a4 ?   dmem :
                              L1_wr_a4        ?   CPU_dmem_wr_data_a4 :
                                             CPU_Dmem_value_a5[dmem][31:0];
            end endgenerate
                                        
            //_?$dmem_rd_en
               assign CPU_dmem_rd_data_a4[31:0] = CPU_Dmem_value_a5[CPU_dmem_addr_a4];
            `BOGUS_USE(CPU_dmem_rd_data_a4)
      //_\end_source    // Args: (read/write stage)
   
   //_\source /raw.githubusercontent.com/BalaDhinesh/RISCVMYTHWorkshop/master/tlvlib/riscvshelllib.tlv 144   // Instantiated from riscv.tlv, 220 as: m4+cpu_viz(@4)
      
      
      
         
         
         
            
            
            
               
            
               
      
      
         
         
      
         
            
               
               
               
                  
                  
                     
                     
                        
                        
                        
                        
                     
                  
                  
                
         
            
               
               
               
               
   
               
               
               
               
               
               
   
               
               
               
   
               
   
               
               
               
               
               
               
               
               
               
               
   
               
               
               
               
               
                  
                  
                  
                  
               
                  
                  
                  
                  
               
               
               
               
               
               
               
               
               
               
         
            
            
            
               
               
            
            
               
               
   
            
            
            
            
               
               
                  
                  
                  
                  
                  
                                                     
                  
                     
                     
                     
                     
                     
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                     
                  
                  
                     
                                
                                
                  
                  
                            
                            
                  
                     
                     
                     
                     
                     
                  
                  
               
            
            
            
            
               
                  
                  
                     
                     
                        
                           
                           
                           
                        
                        
                     
                  
                  
                     
                        
                        
                        
                     
                     
                  
                  
                     
                     
                     
                     
                     
                        
                        
                  
                  
                  
            
            
            
            
               
                  
                  
                     
                     
                     
                           
                           
                           
                           
                        
                        
                     
                  
                  
                     
                        
                        
                        
                        
                     
                     
                  
                  
                     
                     
                     
                     
                     
                        
                        
                  
                  
                  
      
      
   //_\end_source    // For visualisation, argument should be at least equal to the last stage of CPU logic
                       // @4 would work for all labs
//_\SV
   endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
